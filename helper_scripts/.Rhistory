length(li_allTrj) = length(folders)
#handle all folders/trajectories
for (folder_idx in seq(length(folders))){
cid_files = list.files(folders[folder_idx], full.names = TRUE, pattern = 'CID')
MDtrj_files = list.files(folders[folder_idx], full.names = TRUE, pattern = 'MDtrj')
li_singleTrj = list()
length(li_singleTrj) = length(cid_files) + length(MDtrj_files)
li_idx = 1
#simulation startup
dt = fread(MDtrj_files[1])
dt[, file := basename(MDtrj_files[1])]
dt[, collisions := 0]
li_singleTrj[[li_idx]] = dt
li_idx = 2
#handle
for (cid_idx in seq(length(cid_files))){
for (MD_type in c('CID', 'MDtrj')){
if(MD_type == 'CID'){
current_file = cid_files[cid_idx]
} else if (MD_type == 'MDtrj'){
current_file = MDtrj_files[cid_idx + 1]
}
if(!is.na(current_file)){
dt = fread(current_file)
dt[, file := basename(current_file)]
dt[, collisions := cid_idx]
li_singleTrj[[li_idx]] = dt
li_idx = li_idx + 1
}
}
}
dt_trj = rbindlist(li_singleTrj)
number = sub('.*TMP\\.(\\d+)$', '\\1', folders[folder_idx])
if (reduce_to_relevant == TRUE){
setnames(dt_trj, 'V2', 'SMILES')
dt_trj = remove_equilibrium_reactions(dt_trj)
colnames(dt_trj) = paste0(c('id', 'SMILES', 'collisions'), '_', number)
} else if (reduce_to_relevant == FALSE){
colnames(dt_trj) = paste0(c('id', 'SMILES', 'file', 'collisions'), '_', number)
}
li_allTrj[[folder_idx]] = dt_trj
print(paste0(folder_idx, '/', length(folders)))
}
li_allTrj = fill_empty_rows(li_allTrj)
dt_combined <- do.call(cbind, li_allTrj)
fwrite(dt_combined, paste0('C:/PostDoc/Ming_time/example_files/csvs_summary/summary_,', pattern, '.csv'))
View(dt_trj)
View(dt_combined)
dt_combinedR <- rbindlist(li_allTrj)
dt_combinedR[[1]]
li_allTrj[[1]]
colnames(li_allTrj[[78]])
strsplit(colnames(li_allTrj[[78]]), '_')
strsplit(colnames(li_allTrj[[78]]), '_')[1]
lapply(strsplit(colnames(li_allTrj[[78]]), '_'), function(y){
y[1]
})
lapply(li_allTrj, function(x){
cn = strsplit(colnames(x), '_')
cn = lapply(cn, function(y){
return(y[1])
})
colnames(x) = cn
})
lapply(li_allTrj, function(x){
cn = strsplit(colnames(x), '_')
cn = lapply(cn, function(y){
return(y[1])
})
print(cn)
colnames(x) = cn
})
lapply(li_allTrj, function(x){
cn = strsplit(colnames(x), '_')
cn = lapply(cn, function(y){
return(y[1])
})
colnames(x) = unlist(cn)
})
rbindlist(li_allTrj)
View(li_allTrj)
lapply(li_allTrj, function(x){
cn = strsplit(colnames(x), '_')
cn = lapply(cn, function(y){
return(y[1])
})
cn = unlist(cn)
print(cn)
colnames(x) =
})
lapply(li_allTrj, function(x){
cn = strsplit(colnames(x), '_')
cn = lapply(cn, function(y){
return(y[1])
})
cn = unlist(cn)
print(cn)
colnames(x) = cn
})
li_allTrj = fill_empty_rows(li_allTrj)
li_allTrj =
lapply(li_allTrj, function(x){
cn = strsplit(colnames(x), '_')
cn = lapply(cn, function(y){
return(y[1])
})
cn = unlist(cn)
print(cn)
colnames(x) = cn
return(x)
})
li_allTrj[[3]]
dt_combinedR = rbindlist(li_allTrj)
head(dt_combinedR)
dt_combinedR = dt_combinedR[!is.na(id)]
head(dt_combinedR)
li_allTrj = fill_empty_rows(li_allTrj)
li_allTrj =
lapply(li_allTrj, function(x){
cn = strsplit(colnames(x), '_')
id = cn[[1]][2]
cn = lapply(cn, function(y){
return(y[1])
})
cn = unlist(cn)
colnames(x) = cn
x[, trj := id]
return(x)
})
dt_combinedR = rbindlist(li_allTrj)
dt_combinedR = dt_combinedR[!is.na(id)]
head(dt_combinedR)
View(dt_combinedR)
li_allTrj = fill_empty_rows(li_allTrj)
li_allTrj =
lapply(li_allTrj, function(x){
cn = strsplit(colnames(x), '_')
trj_id = cn[[1]][2]
cn = lapply(cn, function(y){
return(y[1])
})
cn = unlist(cn)
colnames(x) = cn
x[, trj := trj_id]
return(x)
})
warnings()
li_allTrj = fill_empty_rows(li_allTrj)
li_allTrj =
lapply(li_allTrj, function(x){
cn = strsplit(colnames(x), '_')
trj_id = cn[[1]][2]
cn = lapply(cn, function(y){
return(y[1])
})
cn = unlist(cn)
colnames(x) = cn
x[, trj := trj_id]
print(x)
return(x)
})
li_allTrj = fill_empty_rows(li_allTrj)
cn = strsplit(colnames(li_allTrj[[5]]), '_')
cn
li_allTrj = fill_empty_rows(li_allTrj)
li_allTrj = fill_empty_rows(li_allTrj)
li_allTrj = list()
length(li_allTrj) = length(folders)
#handle all folders/trajectories
for (folder_idx in seq(length(folders))){
cid_files = list.files(folders[folder_idx], full.names = TRUE, pattern = 'CID')
MDtrj_files = list.files(folders[folder_idx], full.names = TRUE, pattern = 'MDtrj')
li_singleTrj = list()
length(li_singleTrj) = length(cid_files) + length(MDtrj_files)
li_idx = 1
#simulation startup
dt = fread(MDtrj_files[1])
dt[, file := basename(MDtrj_files[1])]
dt[, collisions := 0]
li_singleTrj[[li_idx]] = dt
li_idx = 2
#handle
for (cid_idx in seq(length(cid_files))){
for (MD_type in c('CID', 'MDtrj')){
if(MD_type == 'CID'){
current_file = cid_files[cid_idx]
} else if (MD_type == 'MDtrj'){
current_file = MDtrj_files[cid_idx + 1]
}
if(!is.na(current_file)){
dt = fread(current_file)
dt[, file := basename(current_file)]
dt[, collisions := cid_idx]
li_singleTrj[[li_idx]] = dt
li_idx = li_idx + 1
}
}
}
dt_trj = rbindlist(li_singleTrj)
number = sub('.*TMP\\.(\\d+)$', '\\1', folders[folder_idx])
if (reduce_to_relevant == TRUE){
setnames(dt_trj, 'V2', 'SMILES')
dt_trj = remove_equilibrium_reactions(dt_trj)
colnames(dt_trj) = paste0(c('id', 'SMILES', 'collisions'), '_', number)
} else if (reduce_to_relevant == FALSE){
colnames(dt_trj) = paste0(c('id', 'SMILES', 'file', 'collisions'), '_', number)
}
li_allTrj[[folder_idx]] = dt_trj
print(paste0(folder_idx, '/', length(folders)))
}
li_allTrj = fill_empty_rows(li_allTrj)
dt_combinedC <- do.call(cbind, li_allTrj)
cn = strsplit(colnames(li_allTrj[[5]]), '_')
cn
cn[[1]][2]
li_allTrj =
lapply(li_allTrj, function(x){
cn = strsplit(colnames(x), '_')
trj_id = cn[[1]][2]
cn = lapply(cn, function(y){
return(y[1])
})
cn = unlist(cn)
colnames(x) = cn
x[, trj := trj_id]
print(x)
return(x)
})
dt_combinedR = rbindlist(li_allTrj)
dt_combinedR = dt_combinedR[!is.na(id)]
head(dt_combinedR)
dt_combinedR[, smiles_id := .GRP, by =.(SMILES)]
head(dt_combinedR)
dt_combinedR[, last_smiles := smiles_id[which.max(id)], by =.(trj)]
head(dt_combinedR)
dt_combinedR[, full_trj := paste0(smiles_id, collapse = ','), by =.(trj)]
dt_full_trj_summary = dt_combinedR[, .(.N), by =.(full_trj)]
dt_full_trj_summary
dt_full_trj_summary = dt_combinedR[, .(SMILES = unique(SMILES),
n = .N), by =.(full_trj)]
dt_full_trj_summary
root = 'C:/PostDoc/Ming_time/example_files/csvs_batch'
pattern = '18_protonated_mol_1'
folders = list.files(root, full.names = TRUE, pattern = pattern)
reduce_to_relevant = TRUE
li_allTrj = list()
length(li_allTrj) = length(folders)
#handle all folders/trajectories
for (folder_idx in seq(length(folders))){
cid_files = list.files(folders[folder_idx], full.names = TRUE, pattern = 'CID')
MDtrj_files = list.files(folders[folder_idx], full.names = TRUE, pattern = 'MDtrj')
li_singleTrj = list()
length(li_singleTrj) = length(cid_files) + length(MDtrj_files)
li_idx = 1
#simulation startup
dt = fread(MDtrj_files[1])
dt[, file := basename(MDtrj_files[1])]
dt[, collisions := 0]
li_singleTrj[[li_idx]] = dt
li_idx = 2
#handle
for (cid_idx in seq(length(cid_files))){
for (MD_type in c('CID', 'MDtrj')){
if(MD_type == 'CID'){
current_file = cid_files[cid_idx]
} else if (MD_type == 'MDtrj'){
current_file = MDtrj_files[cid_idx + 1]
}
if(!is.na(current_file)){
dt = fread(current_file)
dt[, file := basename(current_file)]
dt[, collisions := cid_idx]
li_singleTrj[[li_idx]] = dt
li_idx = li_idx + 1
}
}
}
dt_trj = rbindlist(li_singleTrj)
number = sub('.*TMP\\.(\\d+)$', '\\1', folders[folder_idx])
if (reduce_to_relevant == TRUE){
setnames(dt_trj, 'V2', 'SMILES')
dt_trj = remove_equilibrium_reactions(dt_trj)
colnames(dt_trj) = paste0(c('id', 'SMILES', 'collisions'), '_', number)
} else if (reduce_to_relevant == FALSE){
colnames(dt_trj) = paste0(c('id', 'SMILES', 'file', 'collisions'), '_', number)
}
li_allTrj[[folder_idx]] = dt_trj
print(paste0(folder_idx, '/', length(folders)))
}
li_allTrj = fill_empty_rows(li_allTrj)
dt_combinedC <- do.call(cbind, li_allTrj)
fwrite(dt_combinedC, paste0('C:/PostDoc/Ming_time/example_files/csvs_summary/summary_,', pattern, '.csv'))
li_allTrj =
lapply(li_allTrj, function(x){
cn = strsplit(colnames(x), '_')
trj_id = cn[[1]][2]
cn = lapply(cn, function(y){
return(y[1])
})
cn = unlist(cn)
colnames(x) = cn
x[, trj := trj_id]
return(x)
})
dt_combinedR = rbindlist(li_allTrj)
dt_combinedR = dt_combinedR[!is.na(id)]
dt_combinedR[, smiles_id := .GRP, by =.(SMILES)]
dt_combinedR[, last_smiles := smiles_id[which.max(id)], by =.(trj)]
dt_combinedR[, full_trj := paste0(smiles_id, collapse = ','), by =.(trj)]
dt_full_trj_summary = dt_combinedR[, .(SMILES = unique(SMILES),
n = .N), by =.(full_trj)]
dt_full_trj_summary
lenth(unique(dt_full_trj_summary$full_trj))
length(unique(dt_full_trj_summary$full_trj))
View(dt_full_trj_summary)
install.packages("devtools")
devtools::install_github('schymane/RChemMass')
BiocManager::install("RMassBank")
devtools::install_github('schymane/RChemMass')
RChemMass::getSuspectFormulaMass('[H]Oc1nc(=[N+]([H])[H])n([H])c2nc([H])n([H])c12')
?RChemMass::getSuspectFormulaMass
dt_full_trj_summary
library(data.table)
fill_empty_rows = function(li){
max_rows = max(unlist(lapply(li, nrow)))
op_li =
lapply(li, function(x){
while(nrow(x) < max_rows) {
x <- rbind(x, data.table::data.table(matrix(NA, nrow = 1, ncol = ncol(x), dimnames = list(NULL, names(x)))))
}
return(x)
})
return(op_li)
}
remove_equilibrium_reactions = function(dt){
#remove the N2
dt[, SMILES := sapply(SMILES, function(x) {
# Split each string in SMILES by '.'
split_strs = unlist(strsplit(x, split = "\\.", fixed = FALSE))
# Remove 'N#N' from the list
filtered_strs = split_strs[split_strs != "N#N"]
# Collaps back the remaining strings by '.' and return
return(paste(filtered_strs, collapse = "."))
})]
dt[, idx := .I]
# Create an intermediate index
dt[, indx := .GRP, by = SMILES]
dt = dt[, .(idx_min = min(idx),
idx_max = max(idx),
collisions_min = min(collisions),
collisions_max = max(collisions)), by =.(SMILES)]
dt = dt[order(idx_min)]
dt[, id := .I]
dt[, flag := FALSE]
smiles_entry = 1
while(smiles_entry < nrow(dt)){
dt[idx_max < dt[id == smiles_entry, idx_max] &
id > smiles_entry, flag := TRUE]
dt = dt[flag == FALSE]
dt[, id := .I]
smiles_entry = smiles_entry + 1
}
dt = dt[, .(collisions = paste0(c(collisions_min, collisions_max), collapse = '_')), by =.(id, SMILES)]
return(dt)
}
root = 'C:/PostDoc/Ming_time/example_files/csvs_batch'
pattern = '18_protonated_mol_1'
folders = list.files(root, full.names = TRUE, pattern = pattern)
reduce_to_relevant = TRUE
li_allTrj = list()
length(li_allTrj) = length(folders)
#handle all folders/trajectories
for (folder_idx in seq(length(folders))){
cid_files = list.files(folders[folder_idx], full.names = TRUE, pattern = 'CID')
MDtrj_files = list.files(folders[folder_idx], full.names = TRUE, pattern = 'MDtrj')
li_singleTrj = list()
length(li_singleTrj) = length(cid_files) + length(MDtrj_files)
li_idx = 1
#simulation startup
dt = fread(MDtrj_files[1])
dt[, file := basename(MDtrj_files[1])]
dt[, collisions := 0]
li_singleTrj[[li_idx]] = dt
li_idx = 2
#handle
for (cid_idx in seq(length(cid_files))){
for (MD_type in c('CID', 'MDtrj')){
if(MD_type == 'CID'){
current_file = cid_files[cid_idx]
} else if (MD_type == 'MDtrj'){
current_file = MDtrj_files[cid_idx + 1]
}
if(!is.na(current_file)){
dt = fread(current_file)
dt[, file := basename(current_file)]
dt[, collisions := cid_idx]
li_singleTrj[[li_idx]] = dt
li_idx = li_idx + 1
}
}
}
dt_trj = rbindlist(li_singleTrj)
number = sub('.*TMP\\.(\\d+)$', '\\1', folders[folder_idx])
if (reduce_to_relevant == TRUE){
setnames(dt_trj, 'V2', 'SMILES')
dt_trj = remove_equilibrium_reactions(dt_trj)
colnames(dt_trj) = paste0(c('id', 'SMILES', 'collisions'), '_', number)
} else if (reduce_to_relevant == FALSE){
colnames(dt_trj) = paste0(c('id', 'SMILES', 'file', 'collisions'), '_', number)
}
li_allTrj[[folder_idx]] = dt_trj
print(paste0(folder_idx, '/', length(folders)))
}
li_allTrj = fill_empty_rows(li_allTrj)
dt_combinedC <- do.call(cbind, li_allTrj)
fwrite(dt_combinedC, paste0('C:/PostDoc/Ming_time/example_files/csvs_summary/summary_,', pattern, '.csv'))
cid_files
MDtrj_files
library(data.table)
fill_empty_rows = function(li){
max_rows = max(unlist(lapply(li, nrow)))
op_li =
lapply(li, function(x){
while(nrow(x) < max_rows) {
x <- rbind(x, data.table::data.table(matrix(NA, nrow = 1, ncol = ncol(x), dimnames = list(NULL, names(x)))))
}
return(x)
})
return(op_li)
}
remove_equilibrium_reactions = function(dt){
#remove the N2
dt[, SMILES := sapply(SMILES, function(x) {
# Split each string in SMILES by '.'
split_strs = unlist(strsplit(x, split = "\\.", fixed = FALSE))
# Remove 'N#N' from the list
filtered_strs = split_strs[split_strs != "N#N"]
# Collaps back the remaining strings by '.' and return
return(paste(filtered_strs, collapse = "."))
})]
dt[, idx := .I]
# Create an intermediate index
dt[, indx := .GRP, by = SMILES]
dt = dt[, .(idx_min = min(idx),
idx_max = max(idx),
collisions_min = min(collisions),
collisions_max = max(collisions)), by =.(SMILES)]
dt = dt[order(idx_min)]
dt[, id := .I]
dt[, flag := FALSE]
smiles_entry = 1
while(smiles_entry < nrow(dt)){
dt[idx_max < dt[id == smiles_entry, idx_max] &
id > smiles_entry, flag := TRUE]
dt = dt[flag == FALSE]
dt[, id := .I]
smiles_entry = smiles_entry + 1
}
dt = dt[, .(collisions = paste0(c(collisions_min, collisions_max), collapse = '_')), by =.(id, SMILES)]
return(dt)
}
root = 'C:/PostDoc/Ming_time/example_files/csvs_batch'
pattern = '18_protonated_mol_1'
folders = list.files(root, full.names = TRUE, pattern = pattern)
reduce_to_relevant = TRUE
li_allTrj = list()
length(li_allTrj) = length(folders)
#handle all folders/trajectories
for (folder_idx in seq(length(folders))){
cid_files = list.files(folders[folder_idx], full.names = TRUE, pattern = 'CID')
MDtrj_files = list.files(folders[folder_idx], full.names = TRUE, pattern = 'MDtrj')
li_singleTrj = list()
length(li_singleTrj) = length(cid_files) + length(MDtrj_files)
li_idx = 1
#simulation startup
dt = fread(MDtrj_files[1])
dt[, file := basename(MDtrj_files[1])]
dt[, collisions := 0]
li_singleTrj[[li_idx]] = dt
li_idx = 2
#handle
for (cid_idx in seq(length(cid_files))){
for (MD_type in c('CID', 'MDtrj')){
if(MD_type == 'CID'){
current_file = cid_files[cid_idx]
} else if (MD_type == 'MDtrj'){
current_file = MDtrj_files[cid_idx + 1]
}
if(!is.na(current_file)){
dt = fread(current_file)
dt[, file := basename(current_file)]
dt[, collisions := cid_idx]
li_singleTrj[[li_idx]] = dt
li_idx = li_idx + 1
}
}
}
dt_trj = rbindlist(li_singleTrj)
number = sub('.*TMP\\.(\\d+)$', '\\1', folders[folder_idx])
if (reduce_to_relevant == TRUE){
setnames(dt_trj, 'V2', 'SMILES')
dt_trj = remove_equilibrium_reactions(dt_trj)
colnames(dt_trj) = paste0(c('id', 'SMILES', 'collisions'), '_', number)
} else if (reduce_to_relevant == FALSE){
colnames(dt_trj) = paste0(c('id', 'SMILES', 'file', 'collisions'), '_', number)
}
li_allTrj[[folder_idx]] = dt_trj
print(paste0(folder_idx, '/', length(folders)))
}
li_allTrj = fill_empty_rows(li_allTrj)
dt_combinedC <- do.call(cbind, li_allTrj)
fwrite(dt_combinedC, paste0('C:/PostDoc/Ming_time/example_files/csvs_summary/summary_,', pattern, '_quickCheck.csv'))
